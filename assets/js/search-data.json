{
  
    
        "post0": {
            "title": "넘파이",
            "content": "&#45336;&#54028;&#51060; &#49373;&#49457;&#44284; reshpae &#54632;&#49688; . import numpy as np . a=np.array([[1,2,3],[4,5,6]]) . a . array([[1, 2, 3], [4, 5, 6]]) . b=np.arange(10) # 10개의 1차원 테이블 생성 . np.ones((3,2),dtype=&#39;int32&#39;) #1로만 이루어신 테이블 생성 . array([[1, 1], [1, 1], [1, 1]]) . np.zeros((3,2),dtype=&#39;int32&#39;) # 제로 테이블 생성 . array([[0, 0], [0, 0], [0, 0]]) . re_b=b.reshape(2,5) #reshape 함수 2행 5열로 바꿈 . re_b . array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) . b.reshape(-1,5) . array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) . b.reshape(-2,5) . array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) . c=np.arange(5) . c # 1차원 데이터 . array([0, 1, 2, 3, 4]) . re_c=c.reshape(-1,1) ##2차원 테이블 로 변환 . re_c #2차원 테이블 . array([[0], [1], [2], [3], [4]]) . re_c.reshape(-1,) . array([0, 1, 2, 3, 4]) . &#45336;&#54028;&#51060; &#51064;&#45937;&#49905; . a=np.arange(9) . a=a.reshape(3,3) . a . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . a . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . a[0,1]=1 a[0,2]=2 . a . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . &#49836;&#46972;&#51060;&#49905; (&#50672;&#49549;&#46108; &#44050;&#51012; &#44032;&#51256;&#50728;&#45796;) . a . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . a[0:2,0:2] . array([[0, 1], [3, 4]]) . a[:] . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . &#54060;&#49884; &#51064;&#45937;&#49905; &#48169;&#50504;&#50640; &#51080;&#45716; &#45936;&#51060;&#53552;&#47484; &#52636;&#47141;&#54644;&#51468; . a . array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) . a[[0,1],2] . array([2, 5]) . a[1,0:2] . array([3, 4]) . a[1,[0,1]] . array([3, 4]) . f=np.arange(start=1,stop=10) . f . array([1, 2, 3, 4, 5, 6, 7, 8, 9]) . &#48520;&#47536; &#51064;&#45937;&#49905; . &#51312;&#44148; &#54596;&#53552;&#47553;&#44284; &#44160;&#49353;&#51012; &#46041;&#49884;&#50640; &#44032;&#45733;&#54644;&#49436; &#51088;&#51452; &#49324;&#50857;&#46108;&#45796;. . ndarray&#45236;&#51032; &#44050;&#51060; 5&#48372;&#45796; &#53360; ndarray&#47484; &#52628;&#52636;&#54616;&#44256;&#51088; &#54620;&#45796;&#47732;? . g=a[a&gt;5] # 어레이 안에서 5보다 큰 데이터를 출력 g print(g) . [6 7 8] . a&gt;5 # true false 형태로 출력 . array([[False, False, False], [False, False, False], [ True, True, True]]) . b=np.arange(10) . b . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . print(b&gt;5) . [False False False False False False True True True True] . aa=np.array([3,1,9,5]) . aa . array([3, 1, 9, 5]) . np.sort(aa) #np.sort는 출력값만 정령해주고 원래 np는 정렬이 되지 않는다. . array([1, 3, 5, 9]) . aa . array([3, 1, 9, 5]) . bb=np.array([2,3,4,1]) . bb . array([2, 3, 4, 1]) . bb.sort() # ndarray.sort 는 출력값을 none값으로 반환하고 원래 값은 정렬이 된다. . cc=bb.sort() . print(&#39;cc값은?:&#39;,cc) # ndarray.sort의 반환값은 none . cc값은?: None . np.sort(aa)[::-1] #내림차순 정리 . array([9, 5, 3, 1]) . qq=np.array([[9,1],[2,4]]) . qq . array([[9, 1], [2, 4]]) . np.sort(qq,axis=0) #로우 방향 정렬 . array([[2, 1], [9, 4]]) . np.sort(qq,axis=1) #컬럼 방향 정렬 . array([[1, 9], [2, 4]]) . argsort | . ori=np.array([3,1,9,5]) . re=np.argsort(ori) ## argsort의 정렬 반환 값은 방번호를 반환 . re . array([1, 0, 3, 2], dtype=int64) . argsort 이거대체 왜씀? 아래 예시 | . name=np.array([&#39;a&#39;,&#39;c&#39;,&#39;r&#39;]) . num=np.array([10,30,23]) . num_sort=np.argsort(num) num_sort . array([0, 2, 1], dtype=int64) . name_sort=name[num_sort] name_sort . array([&#39;a&#39;, &#39;r&#39;, &#39;c&#39;], dtype=&#39;&lt;U1&#39;) . number=num[num_sort] number . array([10, 23, 30]) .",
            "url": "https://pushjun.github.io/jo/python/2022/07/01/numpy-%EC%97%B0%EC%8A%B5.html",
            "relUrl": "/python/2022/07/01/numpy-%EC%97%B0%EC%8A%B5.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pushjun.github.io/jo/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pushjun.github.io/jo/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "학력 . ’-‘ . 프로젝트 . 수상 . 사용 가능 툴 . ## . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pushjun.github.io/jo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pushjun.github.io/jo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}